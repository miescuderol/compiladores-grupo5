%{
package compilador;
import compilador.AnalizadorLexico;
import compilador.Token;
import compilador.Entrada;
import compilador.ElementoPolaca;
import java.util.ArrayList;
import java.util.Stack;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
%}

%token  IF  THEN  ELSE  ID  CTE_INT  FOR  PRINT  CADENA  ULONGINT  INTEGER  ASIGN  COMP_IGUAL  COMP_MENOR_IGUAL  COMP_MAYOR_IGUAL  COMP_DISTINTO  BEGIN  END  STRUCT  CTE_ULON
%start programa
%left '-' '+'
%left '*' '/'

%%

programa :
	  bloque_declaracion  {yyout("PROGRAMA.");}
	 | bloque_declaracion bloque_sentencias  {yyout("PROGRAMA.");}
	 | bloque_sentencias  {yyout("PROGRAMA.");}

;

bloque_declaracion: declaracion  {yyout("declaracion.");}
		  | bloque_declaracion  declaracion   {yyout("Bloque de declaraciones.");}
;

bloque_sentencias: conjunto_sentencias {yyout("Bloque de sentencias.");}

;

declaracion : tipo lista_variables ';' {
                                         for (int i=0;i<this.identificadores.size();i++) {
                                             this.identificadores.get(i).setTipo_dato(this.tipo_dato);
                                         }
                                         this.tipo_dato = null;
                                         this.identificadores.clear();
                                       }
            | estructura ID ';' {    // Recupero la tabla de simbolos
                                    TablaSimbolos t = anaLex.getTablaSimbolos();
                                    // Recupero la entrada de la estructura padre
                                    Entrada padre = t.get(((Entrada)val_peek(1).obj).getNombre());
                                    padre.setTipo_dato(Tipo.STRUCT);
                                    int distancia_acumulada = 0;
                                    for (int i=0;i<elemento_estructuras.size();i++) {
                                        Entrada e = t.get(elemento_estructuras.get(i));
                                        t.removeEntrada(e.getNombre());
                                        Entrada eNueva = new EntradaEstructura(e.getNombre(), e.getTipo(), e.getValor(),padre,distancia_acumulada);
                                        eNueva.setTipo_dato(e.getTipo_dato());
                                        t.addNuevaEntrada(eNueva);
                                        // Actualizo la distancia
                                        if (e.getTipo_dato()==Tipo.INTEGER)
                                            distancia_acumulada = distancia_acumulada + 2;
                                        else if (e.getTipo_dato()==Tipo.ULONGINT)
                                            distancia_acumulada = distancia_acumulada + 4;
                                    }
                                    padre.setTamanio(distancia_acumulada);
                                  }

            | tipo  ';' { yyerror("falta nombre de variable en declaracion.");}
            | estructura ';' {yyerror("falta nombre de la estructura en declaraciï¿½n.");}
            | estructura ID ',' lista_variables ';' {yyerror("declaracion multiple en estructuras esta prohibida.");}
            | lista_variables ';'  { yyerror("declaracion de variable sin tipo definido.");}
            | tipo lista_variables  { yyerror("se esperaba ';'.");}
            | estructura ID { yyerror("se esperaba ';'.");}
;

tipo : INTEGER {this.tipo_dato=Tipo.INTEGER;}
     | ULONGINT {this.tipo_dato=Tipo.ULONGINT;}
     | error {yyerror("tipo primitivo no admitido por el lenguaje.");}
;

estructura : STRUCT {yyout("Sentencia de declaracion de estructura"); elemento_estructuras = new ArrayList<String>();} '{' cuerpo_estructura '}'
;

cuerpo_estructura : tipo ID ';' {
                                      setearTipoElementosEstructuras((Entrada)$2.obj);
                                }
		  | tipo ID ';' {
                                      setearTipoElementosEstructuras((Entrada)$2.obj);
                                } cuerpo_estructura

                  | tipo ID { yyerror("se esperaba ';'.");}
		  | tipo ID cuerpo_estructura { yyerror("se esperaba ';'.");}
;

lista_variables :  ID {Entrada e = anaLex.getTablaSimbolos().get(((Entrada)$1.obj).getNombre());
                       if (!(this.estaRedeclarada(e))) {
                         this.identificadores.add(e);
                       }
                      }
                 | ID ',' lista_variables { Entrada e = anaLex.getTablaSimbolos().get(((Entrada)$1.obj).getNombre());
                                            if (!(this.estaRedeclarada(e))) {
	                                        this.identificadores.add(e);
                                            }
                                         }
;

bloque : sentencia   {yyout("Una sola sentencia.");}
       | BEGIN conjunto_sentencias END {yyout("Bloque de sentencias.");}
       | conjunto_sentencias END { yyerror("se esperaba un 'begin' al inicio de un bloque de sentencias ejecutables.");}
       | BEGIN conjunto_sentencias { yyerror("se esperaba un 'end' al final de un bloque de sentencias ejecutables.");}
;

conjunto_sentencias : sentencia
                    | sentencia conjunto_sentencias
;

sentencia : seleccion
          | bucle
          | impresion
          | asignacion
;


seleccion : IF condicion  {apilar(ElementoPolaca.BF);} seleccionThen  {yyout("Condicional.");}

          | IF error seleccionThen { yyerror("la condicion de seleccion no es valida.");}
;

seleccionThen: THEN bloque {desapilar(1); apilar(ElementoPolaca.BI);agregarRotulo();} seleccionElse

               | error bloque seleccionElse ';' {yyerror("se esperaba un 'then'.");}
               | THEN seleccionElse ';' {yyerror("se esperaba un bloque luego de la palabra reservada 'then'.");}
;

seleccionElse: ELSE bloque ';' {desapilar(0); agregarRotulo();}

               | error bloque ';' {yyerror("se esperaba un 'else'.");}
               | ELSE ';' {yyerror("se esperaba un bloque luego de la palabra reservada 'else'.");}
               | error ';' {yyerror("falta rama del else");}
;

condicion :  '(' expresion '>' expresion ')'  {yyout("CONDICION");agregarAPolaca(ElementoPolaca.MAYOR);}
			| '(' expresion '<' expresion ')'  {yyout("CONDICION");agregarAPolaca(ElementoPolaca.MENOR);}
			| '(' expresion COMP_IGUAL expresion ')'  {yyout("CONDICION");agregarAPolaca(ElementoPolaca.IGUAL);}
			| '(' expresion COMP_DISTINTO expresion ')'  {yyout("CONDICION");agregarAPolaca(ElementoPolaca.DISTINTO);}
			| '(' expresion COMP_MENOR_IGUAL expresion ')'  {yyout("CONDICION");agregarAPolaca(ElementoPolaca.MENORIGUAL);}
			| '(' expresion COMP_MAYOR_IGUAL expresion ')'  {yyout("CONDICION");agregarAPolaca(ElementoPolaca.MAYORIGUAL);}
	
			|'(' expresion  '>'{yyerror("Falta la expresion derecha de la condicion.");} ')' 
			|'(' expresion  '<'{yyerror("Falta la expresion derecha de la condicion.");} ')' 
			|'(' expresion  COMP_IGUAL{yyerror("Falta la expresion derecha de la condicion.");} ')'
			|'(' expresion  COMP_DISTINTO{yyerror("Falta la expresion derecha de la condicion.");} ')'
			|'(' expresion  COMP_MENOR_IGUAL{yyerror("Falta la expresion derecha de la condicion.");} ')'
			|'(' expresion  COMP_MAYOR_IGUAL{yyerror("Falta la expresion derecha de la condicion.");} ')'
			
			|  '(' expresion '>' expresion {yyerror("Falta ')' al final de la condicion.");}
			|  '(' expresion '<' expresion {yyerror("Falta ')' al final de la condicion.");}
			|  '(' expresion COMP_IGUAL expresion {yyerror("Falta ')' al final de la condicion.");}
			|  '(' expresion COMP_DISTINTO expresion {yyerror("Falta ')' al final de la condicion.");}
			|  '(' expresion COMP_MENOR_IGUAL expresion {yyerror("Falta ')' al final de la condicion.");}
			|  '(' expresion COMP_MAYOR_IGUAL expresion {yyerror("Falta ')' al final de la condicion.");}
			
			|  expresion '>' expresion ')' {yyerror("Falta '(' al principio de la condicion.");}
			|  expresion '<' expresion ')' {yyerror("Falta '(' al principio de la condicion.");}
			|  expresion COMP_IGUAL expresion ')' {yyerror("Falta '(' al principio de la condicion.");}
			|  expresion COMP_DISTINTO expresion ')' {yyerror("Falta '(' al principio de la condicion.");}
			|  expresion COMP_MENOR_IGUAL expresion ')' {yyerror("Falta '(' al principio de la condicion.");}
			|  expresion COMP_MAYOR_IGUAL expresion ')' {yyerror("Falta '(' al principio de la condicion.");}

			|  expresion '>' expresion {yyerror("Faltan parentesis en condicion.");}
			|  expresion '<' expresion {yyerror("Faltan parentesis en condicion.");}
			|  expresion COMP_IGUAL expresion {yyerror("Faltan parentesis en condicion.");}
			|  expresion COMP_DISTINTO expresion {yyerror("Faltan parentesis en condicion.");}
			|  expresion COMP_MENOR_IGUAL expresion {yyerror("Faltan parentesis en condicion.");}
			|  expresion COMP_MAYOR_IGUAL expresion {yyerror("Faltan parentesis en condicion.");}

			|'(' error {yyerror("Se encontro un error en la condicion.");} ')'
			|  error {yyerror("Se encontro un error en la condicion");} ')'

		;

expresion : expresion '+' termino {agregarAPolaca(ElementoPolaca.SUMA);yyout("Sentencia de suma.");}
          | expresion '-' termino {agregarAPolaca(ElementoPolaca.RESTA);yyout("Sentencia de resta.");}
          | termino

          | expresion '+'  { yyerror("se esperaba un termino luego del '+'.");}
          | expresion '-'   { yyerror("se esperaba un termino luego del '-'.");}

;

asignacion : ID ASIGN expresion ';' {
                                        Entrada e = anaLex.getTablaSimbolos().get(((Entrada)$1.obj).getNombre());
                                        estaDeclarada(e);
                                        agregarAPolacaId((Entrada)$1.obj);
                                        agregarAPolaca(ElementoPolaca.ASIGNACION);
                                    }
           | elemento_estructura ASIGN expresion ';'    {yyout("Asignacion a elemento de estructura.");
                                                         agregarAPolacaId(estructuraPolaca);
                                                         agregarAPolaca(ElementoPolaca.ASIGNACION);}

           | ID  expresion ';'    { yyerror("se esperaba el operador de asignacion ':='.");}
           | ID ASIGN  ';'        { yyerror("se esperaba una expresion del lado derecho de la asignacion.");}
           | ID ASIGN expresion error { yyerror("se esperaba ';'.");}
;

termino : termino '*' factor {agregarAPolaca(ElementoPolaca.MULTIPLICACION);yyout("Sentencia de producto.");}
        | termino '/' factor {agregarAPolaca(ElementoPolaca.DIVISION);yyout("Sentencia de division.");}
        | factor

        | termino '*'   { yyerror("se esperaba un factor luego de '*'.");}
        | termino '/'   { yyerror("se esperaba un factor luego de '/'.");}
;

factor : factor_comun
       | elemento_estructura
;

factor_comun : ID {Entrada e = anaLex.getTablaSimbolos().get(((Entrada)$1.obj).getNombre());
                 estaDeclarada(e);
                 agregarAPolacaId(e);}
           | CTE_ULON    {Entrada e = anaLex.getTablaSimbolos().get(((Entrada)$1.obj).getNombre());
                          estaDeclarada(e);
                          agregarAPolacaConstante(e);}
           | CTE_INT       { Entrada e = anaLex.getTablaSimbolos().get(((Entrada)$1.obj).getNombre());
                             e.visitar();
                             fueraRangoIntPositivo((Entrada)$1.obj);
                             agregarAPolacaConstante((Entrada)$1.obj); }
           | '-' CTE_INT   {Entrada actual = anaLex.getTablaSimbolos().get(((Entrada)$2.obj).getNombre());
    				if (!(actual).isVisitado()) {
        			Entrada e = new Entrada("-" + actual.getNombre(), actual.getTipo(), (Integer) actual.getValor() * -1);
        			e.setTipo_dato(Tipo.INTEGER);
        			anaLex.getTablaSimbolos().addNuevaEntrada(e);
        			anaLex.getTablaSimbolos().removeEntrada(((Entrada)($2.obj)).getNombre());
 				agregarAPolacaConstante(e);
    				} else {
        			Entrada e = new Entrada("-" + actual.getNombre(), actual.getTipo(),(Integer)actual.getValor() * -1);
        			anaLex.getTablaSimbolos().addNuevaEntrada(e);
 				agregarAPolacaConstante(e);
 				}
			    }
;

elemento_estructura : ID '.' ID  {yyout("Elemento de estructura.");
                                  estructuraPolaca = (Entrada)$3.obj;
                                  
                                  Entrada ePadre = anaLex.getTablaSimbolos().get(((Entrada)$1.obj).getNombre());
	                          EntradaEstructura eHijo = (EntradaEstructura) (anaLex.getTablaSimbolos().get(((Entrada)$3.obj).getNombre()));
	                          if (!ePadre.getNombre().equals(eHijo.getEstructura().getNombre())) {
	                               this.erroresSemanticos.add("En linea: " + anaLex.getNumeroLinea() + " - El identificador " + eHijo.getNombre() + " no pertenece a la estructura " + ePadre.getNombre());
	                           }

                                  }

                    | ID ID    { yyerror("se esperaba un punto.");}
                    | ID '.'   { yyerror("se esperaba identificador de la variable mientro de la estructura.");}
                    | '.' ID   { yyerror("se esperaba identificador de la estructura antes del punto.");}
;

bucle :  FOR  condicion_for bloque ';'   {agregarAPolacaDecremento();
                                         apilar(ElementoPolaca.BI);
                                         desapilarDireccion();
                                         desapilar(0);
                                         agregarRotulo();
                                         yyout("Bucle for.");}

      | FOR condicion_for ';' {yyerror("se esperaba un bloque de sentencias, pero se encontro ';'.");}
      | FOR condicion_for bloque error  { yyerror("se esperaba ';'.");}
;


condicion_for : '(' ID ASIGN factor_for ';' { Entrada e = anaLex.getTablaSimbolos().get(((Entrada)$2.obj).getNombre());
                                              estaDeclarada(e);
                                              this.elementosDelFor.add(0,e); // agrego la entrada del ID a los elementos del for en la posicion 0

                                              guardarIndiceFor((Entrada)$2.obj);
                                              agregarAPolacaId((Entrada)$2.obj);
                                              agregarAPolaca(ElementoPolaca.ASIGNACION);
                                              agregarRotulo();
                                              apilarDireccion();
                                              } comparacion_for

              | ID ASIGN factor_for ';' comparacion_for  { yyerror("se esperaba '(' antes de la condicion.");}
              | '(' ASIGN factor_for  ';' comparacion_for  { yyerror("se esperaba un identificador antes del operador de asignacion.");}
              | '(' ID ASIGN ';' comparacion_for  { yyerror("se esperaba un identificador o constante despues del operador de asignacion.");}
              | '(' ID error factor_for ';' comparacion_for   { yyerror("se esperaba operador de asignacion.");}
              | '(' ID ASIGN factor_for error comparacion_for  { yyerror("se esperaba ';'.");}
;

comparacion_for : factor_for '>' factor_for ';' {agregarAPolaca(ElementoPolaca.MAYOR);
                                                 apilar(ElementoPolaca.BF);} decremento_for

              |  '>' factor_for ';' decremento_for     { yyerror("se esperaba un identificador o constante antes de '>'.");}
              |  factor_for '>' ';' decremento_for     { yyerror("se esperaba un identificador o constante despues '>'.");}
              |  factor_for error { yyerror("se esperaba '>'.");} factor ';' decremento_for
              |  factor_for '>' factor_for error decremento_for  { yyerror("se esperaba ';'.");}
;

decremento_for : {almacenarDecremento = true;} factor_for ')' {almacenarDecremento = false; controlarTiposFor();}

              |  ')'     { yyerror("se esperaba un identificador o constante despues de ';'.");}
;


factor_for : ID {Entrada e = anaLex.getTablaSimbolos().get(((Entrada)$1.obj).getNombre());
                 estaDeclarada(e);
                 this.elementosDelFor.add(e);
                 agregarAPolacaId(e);}
           | CTE_ULON    {Entrada e = anaLex.getTablaSimbolos().get(((Entrada)$1.obj).getNombre());
                          estaDeclarada(e);
                          this.elementosDelFor.add(e);
                          agregarAPolacaConstante(e);}
           | CTE_INT       { Entrada e = anaLex.getTablaSimbolos().get(((Entrada)$1.obj).getNombre());
                             this.elementosDelFor.add(e);
                             e.visitar();
                             fueraRangoIntPositivo((Entrada)$1.obj);
                             agregarAPolacaConstante((Entrada)$1.obj); }
           | '-' CTE_INT   {Entrada actual = anaLex.getTablaSimbolos().get(((Entrada)$2.obj).getNombre());
    				if (!(actual).isVisitado()) {
        			Entrada e = new Entrada("-" + actual.getNombre(), actual.getTipo(), (Integer) actual.getValor() * -1);
        			e.setTipo_dato(Tipo.INTEGER);
        			anaLex.getTablaSimbolos().addNuevaEntrada(e);
        			anaLex.getTablaSimbolos().removeEntrada(((Entrada)($2.obj)).getNombre());
        			elementosDelFor.add(e);
 				agregarAPolacaConstante(e);
    				} else {
        			Entrada e = new Entrada("-" + actual.getNombre(), actual.getTipo(),(Integer)actual.getValor() * -1);
        			anaLex.getTablaSimbolos().addNuevaEntrada(e);
        			elementosDelFor.add(e);
 				agregarAPolacaConstante(e);
 				}
			    }
;

impresion : PRINT '(' CADENA ')' ';' {yyout("Sentencia de impresion.");
                                      agregarAPolacaConstante((Entrada)$3.obj);
                                      agregarAPolaca(ElementoPolaca.PRINT);}

          | '(' CADENA ')' ';' { yyerror("se esperaba 'print'");}
          | PRINT '(' ')' ';' { yyerror("se esperaba una cadena dentro de la instruccion print.");}
          | PRINT CADENA ')' ';' { yyerror("se esperaba '(' antes de la cadena en sentencia print.");}
          | PRINT '(' CADENA ';' { yyerror("sentencia print sin parentesis de cierre.");}

          | PRINT '(' CADENA ')' error { yyerror("se esperaba ';.'");}
;

%%

private AnalizadorLexico anaLex;
private ArrayList<String> errores;
private ArrayList<String> tokens;
private ArrayList<String> salida;
private ArrayList<String> elemento_estructuras;
private String error_anterior;
private int linea_error_anterior;

// para manejo de los tipos de datos
private Tipo tipo_dato;
private ArrayList<Entrada> identificadores = new ArrayList<Entrada>();

// para manejo de errores semanticos
private ArrayList<String> erroresSemanticos = new ArrayList<String>();

// para control de tipos en el for
private ArrayList<Entrada> elementosDelFor = new ArrayList<Entrada>();

//para manejo de polaca inversa
private ArrayList<ElementoPolaca> polacaInversa = new ArrayList<ElementoPolaca>();
private Stack<Integer> pila=new Stack();
private Stack<Integer> retornos=new Stack();
private Entrada indiceFor;
private ElementoPolaca decrementoFor;
private boolean almacenarDecremento = false;
private Entrada estructuraPolaca;

public static final int MAX_INTEGER_NEG = 32767;
public static final int MAX_INTEGER = 32768;
public static final float MAX_ULONGINTEGER = 4294967295f;

public Parser(AnalizadorLexico analLex){
  anaLex=analLex;
  error_anterior = "";
  errores = new ArrayList<String>();
  tokens = new ArrayList<String>();
  salida = new ArrayList<String>();
}

int yylex() {
        Token t = this.anaLex.getToken();
        tokens.add(t.getNombre());
        yylval = t.getAtributoYacc();
        return t.getCodigoYacc();
}

void yyout(String texto) {
  salida.add("En linea " + anaLex.getNumeroLinea() + " " + texto);

}

void yyerror(String texto) {
     if(!texto.equals("syntax error"))
          errores.add("En linea " + anaLex.getNumeroLinea() + ": se encontro el error: " + texto);
     else{
         if(error_anterior.equals(texto))
              errores.add("En linea " + linea_error_anterior + ": ocurrio un error sintactico");
     }
     linea_error_anterior = anaLex.getNumeroLinea();
     error_anterior = texto;
}

public ArrayList<String> getErrores(){
	return this.errores;
}

public ArrayList<String> getTokens(){
        return this.tokens;
}

public ArrayList<String> getSalida(){
   ArrayList<String> retorno = new ArrayList<String>();
   retorno.add("Analizador léxico: ");
   retorno.addAll(this.tokens);
   retorno.add("Analizador sintáctico: ");
   retorno.addAll(this.salida);
   return retorno;
}

private void fueraRangoIntPositivo(Entrada e){
    int val = (Integer) (e.getValor());
    if ((0 <= val) && (val > MAX_INTEGER-1))
       yyerror("entero fuera de rango [-32768;32767]");
}

private void controlarTiposFor(){
    Tipo t = elementosDelFor.elementAt(0).getTipo_dato();
    int i=0;
    while ((i<this.elementosDelFor.size()) && (t==this.elementosDelFor.get(i).getTipo_dato())) {
         i++;
    }
    if (i<this.elementosDelFor.size()) {
        this.erroresSemanticos.add("En linea " + anaLex.getNumeroLinea() + ": Se esperaba un identificador/constante de tipo " 
                                       + t + " pero se encontro " + this.elementosDelFor.get(i).getTipo_dato());
       // this.elementosDelFor.clear();
    }

}

private void setearTipoElementosEstructuras(Entrada e) {
    elemento_estructuras.add(e.getNombre());
    e = anaLex.getTablaSimbolos().get(e.getNombre());
    e.setTipo_dato(this.tipo_dato);
    this.tipo_dato = null;
}

private void estaDeclarada(Entrada e) {
    if (e.getTipo_dato()==null) {
        this.erroresSemanticos.add("En linea: " + anaLex.getNumeroLinea() + " - La variable " + e.getNombre() + " no esta declarada.");
    }
}


private boolean estaRedeclarada(Entrada e) {
    if (e.getTipo_dato()!=null) {
        this.erroresSemanticos.add("En linea: " + anaLex.getNumeroLinea() + " - La variable " + e.getNombre() + " ya esta declarada.");
        return true;
    }
    return false;
}

public ArrayList<String> getErroresSemanticos() {
    return this.erroresSemanticos;
}

public ArrayList<ElementoPolaca> getPolacaInversa(){
    return this.polacaInversa;
}

public boolean isCompilable(){
       return (erroresSemanticos.isEmpty());
}

//metodos para controlar la polaca
private void agregarAPolacaId(Entrada e){
    Tipo t = anaLex.getTablaSimbolos().get(e.getNombre()).getTipo_dato();
    ElementoPolaca ep = new ElementoPolaca(ElementoPolaca.VARIABLE, t,e.getNombre());
    if (almacenarDecremento)
       decrementoFor = ep;
    else
        polacaInversa.add(ep);
}

private void agregarAPolacaConstante(Entrada e){
    ElementoPolaca ep;
    if(e.getTipo() == Tipo.CONSTANTE_INTEGER)
    ep = new ElementoPolaca(ElementoPolaca.CONSTANTE, Tipo.INTEGER,e.getValor().toString());
    else
      if(e.getTipo() == Tipo.CONSTANTE_ULONGINT)
        ep = new ElementoPolaca(ElementoPolaca.CONSTANTE, Tipo.ULONGINT,e.getValor().toString());
      else
        ep = new ElementoPolaca(ElementoPolaca.CADENA,e.getValor().toString());
    if(almacenarDecremento)
        decrementoFor = ep;
    else 
        polacaInversa.add(ep);
}

private void agregarAPolaca(int t){
     polacaInversa.add(new ElementoPolaca(t));
}

private void agregarAPolacaDecremento(){
    agregarAPolacaId(indiceFor);
    polacaInversa.add(decrementoFor);
    polacaInversa.add(new ElementoPolaca(ElementoPolaca.RESTA));
    agregarAPolacaId(indiceFor);
    polacaInversa.add(new ElementoPolaca(ElementoPolaca.ASIGNACION));
}

private void guardarIndiceFor(Entrada e){
    this.indiceFor = e;
}


private void apilar(int s) {
        pila.push(polacaInversa.size());
        polacaInversa.add(new ElementoPolaca(s));
}

private void desapilar(int desplazamiento) {
        int pos = pila.pop().intValue();
        int direccion = polacaInversa.size()+desplazamiento;
        polacaInversa.get(pos).setNombre("LABEL_"+Integer.toString(direccion));
}

private void agregarRotulo(){
    polacaInversa.add(new ElementoPolaca(ElementoPolaca.ROTULO,"LABEL_"+Integer.toString(polacaInversa.size())));
}

private void apilarDireccion() {
        retornos.push(polacaInversa.size()-1);
}

private void desapilarDireccion() {
        int pos=pila.pop().intValue();
        int direccion=retornos.pop();
        polacaInversa.get(pos).setNombre("LABEL_"+Integer.toString(direccion));
}
